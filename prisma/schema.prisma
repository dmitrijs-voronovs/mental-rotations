// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  role            Role             @default(USER)
  accounts        Account[]
  sessions        Session[]
  completedTests  CompletedTest[]
  info            UserInfo?
  additionalTests AdditionalTest[]
}

model UserInfo {
  id        String @id @default(cuid())
  info      Json
  testGroup Int    @default(1)
  userId    String @unique
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Test {
  id             String          @id @default(cuid())
  name           String          @unique
  description    String
  tasks          Task[]
  completedTests CompletedTest[]
}

model Task {
  id             String @id @default(cuid())
  taskNumber     Int
  referenceShape Json
  targetShape    Json
  angles         Json?
  images         Json
  correctAnswer  Int
  testId         String
  test           Test   @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@unique([id, testId])
}

model CompletedTest {
  id        String          @id @default(cuid())
  createdAt DateTime        @default(now())
  tasks     CompletedTask[]
  userId    String
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  testId    String
  test      Test            @relation(fields: [testId], references: [id], onDelete: Cascade)
}

model CompletedTask {
  id      String        @id @default(cuid())
  time    Float
  answer  Int
  correct Boolean
  testId  String
  test    CompletedTest @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@unique([id, testId])
}

enum AdditionalTestType {
  PHQ9
  EMOTION_WHEEL
}

model AdditionalTest {
  id        String             @id @default(cuid())
  createdAt DateTime           @default(now())
  type      AdditionalTestType
  data      Json
  userId    String
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}
